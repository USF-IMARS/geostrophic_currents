---
title: "Extract Dates from All CTD Data"
author: "Sebastian Di Geronimo"
date: 2025-08-07
format: html
editor: source
---



# ---- Summary of Document ----

Load all CTD data and extract the min and max dates for all CTD data




# ---- Setup ----


## Load Libraries

```{r setup, include=FALSE}
if (!nzchar(system.file(package = "librarian"))) 
  install.packages("librarian")

librarian::shelf(
  quiet = TRUE,
  librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
  forcats, lubridate, glue, fs, magrittr, here,
  
  # additional
)

conflicts_prefer(
  dplyr::filter(), 
  dplyr::select()
  )



# set paths to downloaded data, ffmpeg, and animation
path_save <- here("data", "raw", "copernicus")


```

# Load CTD Data from Box

```{r load-ctd}
path_save <- rstudioapi::selectDirectory()

# path_save <- "C:/Users/sebastian15/Box/mbon_imars_cruises/ctd_data/cleaned_ctd_data"

ctd_dat <-
  path_save %>%
  dir_ls() %>%
  tibble(file = .) %>%
  # slice(1:4) %>%
  mutate(
    data = imap(
      file,
      \(.x, idx) {
        print(basename(.x))
        cruise <- # fix cruise WB22212
          basename(.x) %>%
          tools::file_path_sans_ext() %>%
          str_replace("WS", "WB")

        x <- 
          read_csv(.x, show_col_types = FALSE) %>%
          select(cruise_id, time, station) %>%
          mutate(
            time = as_date(time),

            # fix station names with:
            # leading `.` and `00`
            # replace `_` with `.`
            # rename all instances of `Lk` to `21Lk`
            station2 = str_remove(station, cruise),
            station2 = str_remove(station2, "^\\."),
            station2 = str_remove(station2, "^0{1,3}"),
            station2 = str_replace(station2, "(_)", "."),
            station2 = str_replace(station2, ".*LK.*", "21LK")
          ) %>%
          # filter for keys stations that are expected to be CTDs
          filter(station2 %in% c("WS", "MR", "21LK", seq(1:24), "9.5")) %>%
          mutate(
            min_time = min(time, na.rm = TRUE),
            max_time = max(time, na.rm = TRUE),
          ) %>%
          # filter where time matches min?max time
          filter(
            .by = cruise_id,
            time == min_time | time == max_time
          ) %>%
          mutate(
            station2 = as.character(station2),
            station = as.character(station)
          ) %>%
          distinct()

        return(x)
      }
    )
  )

```

# Save Extracted Dates

```{r save-dates}
min_max_date <-
  ctd_dat %>%
  unnest(data) %>%
  arrange(time) %>% 
  select(cruise_id, min_time, max_time) %>%
  distinct %T>%
  print()

# save file
save_loc <- rstudioapi::selectDirectory()
if (!file_exists(save_loc)) {
  message("Saving file")
  write_csv(min_max_date, file =  here(save_loc, "ctd_min_max_date.csv"))
}

```

Load Florida Current Data

```{r}
# fc_dist <- rstudioapi::selectFile()
min_max_date <- rstudioapi::selectFile()
min_max_date <- rstudioapi::selectDirectory()
fc_dist_path <- "C:/Users/sebastian15/Box/aviso_velocity/data/processed/fc_dist_2015-01-01_1_2024-11-19_1.csv"
```


```{r}
fc_dist <- read_csv(fc_dist_path, show_col_types = FALSE)

```

```{r}
dates_14 <- 
  min_max_date %>% 
  read_csv() %>% 
  # slice(1:3) %>% 
  pull(max_time) %>% 
  map(
    \(.x) {
      as_date((.x-days(14)):.x)
    }
  ) %>% 
  list_c() 
  
fc_dist_filt <- 
  fc_dist %>% 
  filter(date %in% dates_14) %>%
  print()

# save cruise file
save_loc <- rstudioapi::selectDirectory()
if (!file_exists(save_loc)) {
  message("Saving file")
  write_csv(fc_dist_filt, file =  here(save_loc, "velocity_14_days.csv"))
}


```

```{r}
fc_dist_filt %>% 
  mutate(
    line_name = fct_reorder(line_name, shore_lon_dd, .fun = min)
  ) %>%
  ggplot(aes(x = date, y = distance_km, color = line_name)) +
  geom_line() +
  geom_point() +
  
  # geom_vline(xintercept = min_max_date$min_time, color = "red", linetype = "dashed") +
  # geom_vline(xintercept = min_max_date$max_time, color = "blue", linetype = "dashed") +
  
  labs(
    x = NULL,
    color = NULL
  ) +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y",
               limits = ym(c("2015-01", "2024-01"))
               ) +
  facet_wrap(~line_name, ncol = 3) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 45)
  )
```

